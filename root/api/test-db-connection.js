# Roteiro de Desenvolvimento: CEOLIN Mobilidade Urbana (com Supabase)

Este documento descreve as etapas conclu√≠das e as tarefas pendentes para levar a aplica√ß√£o a um estado de produ√ß√£o usando uma inst√¢ncia gerenciada do Supabase.

---

## ‚úÖ Fase 1: Funda√ß√£o e Arquitetura do Backend (Conclu√≠do)

Esta fase estabeleceu a base do projeto e a infraestrutura do backend.

-   **[X] Estrutura do Projeto:** Cria√ß√£o da estrutura de pastas para o frontend (Next.js).
-   **[X] Prototipagem da Interface (UI):** Desenvolvimento de todas as telas e componentes visuais para os fluxos do passageiro, motorista e administrador.
-   **[X] Decis√£o Arquitetural:** Utiliza√ß√£o de uma inst√¢ncia **Supabase gerenciada** (via Hostinger) para m√°xima estabilidade e escalabilidade.
-   **[X] Remo√ß√£o da API Intermedi√°ria:** A pasta `api/` e os scripts de auto-hospedagem (`reinstall-supabase.sh`, etc.) foram removidos. A comunica√ß√£o ser√° direta entre o frontend e o Supabase usando a biblioteca cliente oficial.
-   **[X] Instala√ß√£o do Cliente Supabase:** Adi√ß√£o do pacote `@supabase/supabase-js` ao projeto.
-   **[X] Configura√ß√£o do Cliente Supabase:** Cria√ß√£o de um cliente reutiliz√°vel em `src/lib/supabase/client.ts` e configura√ß√£o das vari√°veis de ambiente em `.env.local`.
-   **[X] Atualiza√ß√£o da Documenta√ß√£o:** `README.md` e este `TODO.md` foram atualizados para refletir a nova arquitetura.

---

## ‚è≥ Fase 2: Conex√£o Frontend-Supabase e L√≥gica de Neg√≥cio

Esta √© a fase principal de desenvolvimento, onde conectaremos toda a interface com o Supabase.

### 1. Implementar o Fluxo de Autentica√ß√£o Completo
-   **[X] Refatorar Login do Motorista:** A p√°gina `src/app/driver/login/page.tsx` foi atualizada para usar `supabase.auth.signInWithPassword`.
-   **[ ] Refatorar Registro/Login do Passageiro:** Conectar `PassengerAuthForm` para usar os m√©todos de autentica√ß√£o do Supabase.
-   **[ ] Gerenciamento de Sess√£o:** Implementar a l√≥gica para manter o usu√°rio logado e proteger as rotas que exigem autentica√ß√£o. Utilizar `supabase.auth.onAuthStateChange` para ouvir mudan√ßas no estado da autentica√ß√£o.

### 2. Substituir Dados Est√°ticos por Chamadas ao Supabase
-   **[ ] Perfil do Motorista:** Conectar a p√°gina de perfil (`src/components/driver/ProfileForm.tsx`) para buscar e atualizar os dados do motorista da tabela `profiles` no Supabase.
-   **[ ] Hist√≥rico de Corridas:** Buscar os dados da tabela `rides` no Supabase para exibir o hist√≥rico para passageiros e motoristas.
-   **[ ] Solicita√ß√£o de Corrida:** Criar novos registros na tabela `rides` ao solicitar uma nova corrida.
-   **[ ] Gerenciamento de Usu√°rios (Admin):** Conectar a `UserManagementTable` para buscar, criar e atualizar usu√°rios diretamente no Supabase.

### 3. Implementar Funcionalidades Avan√ßadas com Supabase
-   **[ ] Refatorar Negocia√ß√£o com Genkit:** A l√≥gica do `negotiate-fare.ts` deve ser integrada ao fluxo de solicita√ß√£o de corrida, possivelmente sendo chamada por uma *Supabase Edge Function* quando uma corrida rural for criada.
-   **[ ] Upload de Documentos:** Implementar a l√≥gica de upload de arquivos (CNH, CRLV) usando o `Supabase Storage`. O frontend obter√° uma URL de upload segura do Supabase e enviar√° o arquivo diretamente.

---

## üöÄ Fase 3: Testes e Produ√ß√£o

-   **[ ] Testes de Ponta a Ponta:** Realizar testes completos em todos os fluxos de usu√°rio.
-   **[ ] Seguran√ßa:** Revisar e implementar as *Row Level Security (RLS) policies* no Supabase para garantir que os usu√°rios s√≥ possam acessar e modificar os dados que lhes s√£o permitidos.
-   **[ ] Otimiza√ß√£o:** Analisar e otimizar a performance da aplica√ß√£o e das consultas ao banco de dados.
-   **[ ] Deploy Final:** Configurar a aplica√ß√£o frontend com o dom√≠nio de produ√ß√£o e garantir que ela aponte para as credenciais corretas do projeto Supabase.