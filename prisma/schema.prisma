// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PASSENGER
  DRIVER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(PASSENGER)
  accounts      Account[]
  sessions      Session[]

  driverProfile DriverProfile?
  ridesAsPassenger Ride[] @relation("PassengerRides")
  ridesAsDriver   Ride[] @relation("DriverRides")
}

model DriverProfile {
  id                  String  @id @default(cuid())
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String  @unique
  isApproved          Boolean @default(false)
  availability_status String  @default("offline") // "online", "offline", "in_trip"
  
  vehicleModel        String?
  licensePlate        String? @unique
  vehiclePhotoUrl     String?
  cnhPhotoUrl         String?
  crlvPhotoUrl        String?
  pixKey              String?
}

model Ride {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    passenger   User     @relation("PassengerRides", fields: [passengerId], references: [id])
    passengerId String
    driver      User?    @relation("DriverRides", fields: [driverId], references: [id])
    driverId    String?

    status      String @default("REQUESTED") // REQUESTED, ACCEPTED, IN_PROGRESS, COMPLETED, CANCELED, NEGOTIATING
    
    originAddress String
    originLat     Float?
    originLng     Float?

    destinationAddress String?
    destinationLat     Float?
    destinationLng     Float?

    fare          Float?
    negotiatedFare Float?

    startedBy   String? // "passenger", "driver"
    startedAt   DateTime?
    completedAt DateTime?
}


// --- NextAuth Models ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
